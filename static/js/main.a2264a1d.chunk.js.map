{"version":3,"sources":["components/Input/styles.js","components/Input/index.js","components/MessageWrapper/styles.js","components/MessageWrapper/index.js","pages/Main/styles.js","components/Send/styles.js","components/Send/index.js","schemas/UserSchema.js","components/Rating/styles.js","components/Rating/index.js","pages/Main/index.js","styles/GlobalStyles.js","App.js","index.js"],"names":["Container","styled","div","StyledInput","Field","invalid","css","Button","button","Input","onSend","onlyText","props","value","type","onClick","show","sended","ChatBotIcon","Message","children","chatbot","text","Form","FormikForm","StyledButton","Loader","Send","loading","Yup","shape","name","min","required","city","dateBirth","max","Date","rating","positive","integer","email","Star","span","Rating","defaultRating","currentRating","numberOfStars","useState","setCurrentRating","useRef","hoverHandler","ev","stars","target","parentElement","getElementsByClassName","hoverValue","dataset","Array","from","forEach","star","style","color","starClickHandler","className","ref","data-rating","onMouseOut","current","display","keys","map","n","data-value","onMouseOver","Main","confirmed","setConfirmed","values","a","setSubmitting","setErrors","setStatus","resetForm","axios","post","then","status","toast","success","catch","e","error","useEffect","window","scrollTo","innerHeight","initialValues","validationSchema","UserSchema","onSubmit","errors","touched","setFieldValue","isSubmitting","placeholder","data","size","activeColor","disabled","createGlobalStyle","App","GlobalStyles","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2264a1d.chunk.js","sourcesContent":["import { Field } from 'formik';\nimport styled, { css } from 'styled-components';\n\nexport const Container = styled.div`\n  display:flex;\n  justify-content:center;\n  align-items:center;\n`;\n\nexport const StyledInput = styled(Field)`\n    height:50px;\n    width:200px;\n    padding:5px;\n\n    outline:none;\n    border:1px solid rgb(0,0,0,0.6);\n    border-radius:5px;\n\n    color:rgb(0,0,0,0.6);\n\n    :focus{\n        border:1px solid rgb(0,0,0,0.8);\n        color:rgb(0,0,0,0.8);\n    }\n\n    ${({invalid})=>invalid &&\n        css`\n            border:1px solid rgb(255,0,0,0.6);;\n            color:rgb(255,0,0,0.6);\n\n            :focus{\n                border:1px solid rgb(255,0,0,0.8);\n                color:rgb(255,0,0,0.8);\n            }\n        `\n    }\n`;\n\n\nexport const Button = styled.button`\n    height:50px;\n    width:50px;\n\n    display:flex;\n    justify-content:center;\n    align-items:center;\n\n    font-size:25px;\n    margin-left:5px;\n    border-radius:50%;\n\n    cursor: pointer;\n\n    :hover{\n        background-color:rgba(0,0,0,0.1)\n    }\n`\n","import React from 'react';\nimport { MdSend } from 'react-icons/md';\n\nimport { Container, StyledInput, Button } from './styles';\n\nfunction Input({onSend=()=>false,onlyText=false, ...props}) {\n  return <Container>\n      {!onlyText ?\n        <>\n            <StyledInput {...props} />\n            <Button type=\"button\" onClick={()=>onSend()}><MdSend/></Button>\n        </>\n        :\n        <>\n            {props.value}\n        </>\n      }\n    </Container>;\n}\n\nexport default Input;","import styled, { css } from 'styled-components';\n\nexport const Container = styled.div`\n    display:flex;\n    flex-direction:row;\n    align-items:center;\n    gap:15px;\n\n    width:fit-content;\n    max-width:calc(100%-20px);\n    padding:15px 20px;\n    margin:20px;\n\n    border-radius:10px;\n    border:1px solid rgba(0,0,0,0.3);\n    \n    font-size:14px;\n\n    @media (min-width:400px){\n        max-width:calc(400px);\n    }\n\n\n    ${({show})=>show ? \n        css`\n            transition: opacity 0.8s;\n            opacity: 1;\n        `\n        :\n        css`\n            width:0;\n            height:0;\n            opacity: 0;\n            position:absolute;\n            pointer-events:none;\n        `\n\n    }\n\n    ${({sended})=>sended ? \n        css`\n            margin-left:auto;\n            background-color: var(--sended-message);\n        `\n        :\n        css`\n            background-color: var(--incoming-message);\n        `\n\n    }\n\n    box-shadow: 5px 5px 15px -4px rgba(0,0,0,0.42);\n`;\n\n\nexport const ChatBotIcon = styled.div`\n    display:flex;\n    align-items:center;\n    justify-content:center;\n\n\n\n    font-size:25px;\n    width:50px;\n    height:50px;\n    padding:10px;\n\n    border-radius:100%;\n\n    background-color:rgba(0,0,0,0.6);\n    color:white;\n`","import React from 'react';\n\nimport { Container, ChatBotIcon } from './styles';\nimport {FaRobot} from 'react-icons/fa';\n\nfunction Message({children, chatbot, text,  sended, show=true}) {\n  return <Container sended={sended} show={show}>\n    {\n      chatbot &&\n      <ChatBotIcon >\n          <FaRobot />\n      </ChatBotIcon>\n    }\n    {\n      text ? \n      <p>\n        {children}\n      </p>\n      :\n      <>\n        {children}\n      </>\n    }\n    \n  </Container>;\n}\n\nexport default Message;","import { Form as FormikForm} from 'formik';\nimport styled from 'styled-components';\n\nexport const Container = styled.div`\n    display:flex;\n    flex-direction:column;\n\n    width:100%;\n    min-height:100vh;\n    height:fit-content;\n    max-width:1000px;\n\n    background-color:var(--background-messages);\n`;\n\nexport const Form = styled(FormikForm)`\n    display:flex;\n    flex-direction:column;\n`;","import styled, { css } from 'styled-components';\n\nexport const StyledButton = styled.button`\n    width:calc(100% - 50px);\n\n    display:flex;\n    justify-content:center;\n    align-items:center;\n\n    background-color: #075e54;\n    color:white;\n\n    margin:20px auto;\n    padding:20px 0;\n\n    border:1px solid white;\n    border-radius:5px;\n\n    :hover{\n        cursor:pointer;\n        opacity:0.9;\n    }\n\n    :disabled{\n        opacity:0.6;\n    }\n\n\n    ${({show})=>show ? \n        css`\n            transition: opacity 0.8s;\n            opacity: 1;\n        `\n        :\n        css`\n            width:0;\n            height:0;\n            opacity: 0;\n            position:absolute;\n            pointer-events:none;\n        `\n\n    }\n\n    > svg {\n        margin-left:10px;\n    }\n`;\n\nexport const Loader = styled.div`\n    margin-left:10px;\n    font-size: 10px;\n    text-indent: -9999em;\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background: linear-gradient(to right, #ffffff 10%, rgba(255, 255, 255, 0) 42%);\n    position: relative;\n    animation: load3 1.4s infinite linear;\n    transform: translateZ(0);\n\n    :after{\n        background: #075e54;\n        width: 75%;\n        height: 75%;\n        border-radius: 50%;\n        content: '';\n        margin: auto;\n        position: absolute;\n        top: 0;\n        left: 0;\n        bottom: 0;\n        right: 0;\n    }\n\n    @-webkit-keyframes load3 {\n        0% {\n            -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n        }\n        100% {\n            -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n        }\n    }\n    @keyframes load3 {\n        0% {\n            -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n        }\n        100% {\n            -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n        }\n    }\n\n`\n","import React from 'react';\nimport { MdSend } from 'react-icons/md';\n\nimport { StyledButton, Loader } from './styles';\n\nfunction Send({children, loading, ...props}) {\n  return <StyledButton {...props} >Enviar {loading?<Loader />:<MdSend />}</StyledButton>;\n}\n\nexport default Send;","import * as Yup from 'yup';\n\n\nexport default Yup.object().shape({\n\n    name: Yup.string()\n        .min(2, 'Too Short!')\n        .required('Required'),\n    city: Yup.string()\n        .min(5, 'Too Short!')\n        .required('Required'),\n    dateBirth: Yup.date()\n        .max(new Date())\n        .required('Required'),\n    rating: Yup.number()\n        .required('Required')\n        .positive().integer(),\n    email: Yup.string().email('Invalid email').required('Required'),\n});\n\n","import styled from 'styled-components';\n\nexport const Star = styled.span`\n    color: gray;\n    cursor: pointer;\n    font-size:40px;\n`;\n","import { Field } from \"formik\";\nimport React, { useRef, useState } from \"react\";\nimport { Star } from \"./styles\";\n\n\nconst Rating = ({ onClick,currentRating:defaultRating,numberOfStars, ...props }) => {\n    const [currentRating, setCurrentRating] = useState(defaultRating);\n    const rating = useRef(null);\n\n    const hoverHandler = (ev) => {\n        const stars = ev.target.parentElement.getElementsByClassName(\"star\");\n        const hoverValue = ev.target.dataset.value;\n        Array.from(stars).forEach((star) => {\n            star.style.color =\n                hoverValue >= star.dataset.value ? \"#FCD03F\" : \"gray\";\n        });\n    };\n\n    const setRating = (ev) => {\n        const stars = rating.current.getElementsByClassName(\"star\");\n        Array.from(stars).forEach((star) => {\n            star.style.color =\n            currentRating >= star.dataset.value ? \"#FCD03F\" : \"gray\";\n        });\n    };\n\n    const starClickHandler = (ev) => {\n        let rating = ev.target.dataset.value;\n        setCurrentRating(rating);\n        if (onClick) {\n            onClick(rating);\n        }\n    };\n\n    return (\n        <div\n            className=\"rating\"\n            ref={rating}\n            data-rating={currentRating}\n            onMouseOut={setRating}\n        >\n            <Field type=\"number\" name={props.name} value={currentRating} style={{display:'none'}}  />\n\n            {[...Array(+numberOfStars).keys()].map((n) => {\n                return (\n                    <Star\n                        className=\"star\"\n                        key={n + 1}\n                        data-value={n + 1}\n                        onMouseOver={hoverHandler}\n                        onClick={starClickHandler}\n                    >\n                        &#9733;\n                    </Star>\n                );\n            })}\n\n        </div>\n    );\n};\n\nexport default Rating;\n","import React, { useEffect, useState } from 'react';\nimport Input from '../../components/Input';\nimport Message from '../../components/MessageWrapper';\n\nimport { Container, Form } from './styles';\nimport Send from '../../components/Send';\nimport UserSchema from '../../schemas/UserSchema';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport {  Formik } from 'formik';\nimport Rating from '../../components/Rating';\n\nfunction Main() {\n\n    const [confirmed, setConfirmed] = useState(getDefaultConfirmed());\n\n    useEffect(()=>{\n        window.scrollTo(0,window.innerHeight);\n    },[confirmed]);\n\n    function getDefaultConfirmed(){\n        return {\n            name:false,\n            dateBirth:false,\n            city:false,\n            email:false,\n        };\n    }\n\n    async function submit(values, {setSubmitting, setErrors, setStatus, resetForm}){\n        await axios.post('https://60638cb96bc4d60017fab448.mockapi.io/api/chat/user',{\n            ...values\n        },{})\n        .then(({status})=>{\n            if(status==201){\n                toast.success(\"Avaliação enviada!\");\n                setConfirmed(getDefaultConfirmed());\n                resetForm({})\n            }\n        })\n        .catch((e)=>{\n            toast.error(\"Erro ao enviar avaliação!\");\n        })\n        return true;\n    }\n\n    return <Container>\n             <Formik\n                initialValues={{\n                    name:'',\n                    dateBirth:'',\n                    city:'',\n                    email:'',\n                    rating:0,\n                }}\n                validationSchema={UserSchema}\n                onSubmit={submit}\n            >       \n                {({ errors, values, touched,setFieldValue, isSubmitting}) => {\n\n\n                    function confirmName(){\n                        if(!errors.name){\n                            setConfirmed({...confirmed,name:true})\n                        }else{\n                            setConfirmed({...confirmed,name:false})\n                            setConfirmed({...confirmed,dateBirth:false})\n                            setConfirmed({...confirmed,city:false})\n                            setConfirmed({...confirmed,email:false})\n                        }\n                    }\n\n                    function confirmBirthDate(){\n                        if(!errors.dateBirth){\n                            setConfirmed({...confirmed,dateBirth:true})\n                        }else{\n                            setConfirmed({...confirmed,dateBirth:false})\n                            setConfirmed({...confirmed,city:false})\n                            setConfirmed({...confirmed,email:false})\n                        }\n                    }\n\n                    function confirmCity(){\n                        if(!errors.city){\n                            setConfirmed({...confirmed,city:true})\n                        }else{\n                            setConfirmed({...confirmed,city:false})\n                            setConfirmed({...confirmed,email:false})\n                        }\n                    }\n\n                    function confirmEmail(){\n                        if(!errors.email){\n                            setConfirmed({...confirmed,email:true})\n                        }else{\n                            setConfirmed({...confirmed,email:false})\n                        }\n                    }\n\n                    return <Form>\n                        <Message chatbot >Olá eu sou o ChatNilson tudo bem? Para começarmos, preciso saber seu nome.</Message>\n                        <Message sended >\n                            <Input \n                                type=\"text\"\n                                name=\"name\"\n                                placeholder=\"Nome e Sobrenome\"\n                                value={values.name}\n                                invalid={touched.name && errors.name}\n                                onlyText={confirmed.name}\n                                onSend={()=>confirmName()}\n                            />\n                        </Message>\n\n                        <Message chatbot  show={confirmed.name}>Que satisfação,{values.name}. Agora que sei o seu nome, qual cidade e estado voce mora?</Message>\n\n                        <Message sended show={confirmed.name}>\n                            <Input\n                                type=\"text\"\n                                name=\"city\"\n                                placeholder=\"Cidade\" \n                                value={values.city}\n                                invalid={touched.city &&  errors.city}\n                                onlyText={confirmed.city}\n                                onSend={()=>confirmCity()}\n                            />\n                        </Message>\n                        <Message chatbot  show={confirmed.city}>Legal, agora que sabemos sua cidade e seu estado. Quando foi que você nasceu?</Message>\n                        \n                        <Message sended show={confirmed.city}>\n                            <Input \n                                type=\"date\"\n                                name=\"dateBirth\"\n                                placeholder=\"Data de Nascimento\" \n                                value={values.dateBirth}\n                                invalid={touched.dateBirth && errors.dateBirth}\n                                data={values.name}\n                                onlyText={confirmed.dateBirth}\n                                onSend={()=>confirmBirthDate()}\n                            />\n                        </Message>\n                        <Message chatbot  show={confirmed.dateBirth}>Agora, me fala teu email por gentileza?</Message>\n                        <Message sended show={confirmed.dateBirth}>\n                            <Input \n                                type=\"text\"\n                                name=\"email\"\n                                placeholder=\"Email\"\n                                value={values.email}\n                                invalid={touched.email && errors.email}\n                                onlyText={confirmed.email}\n                                onSend={()=>confirmEmail()}\n                            />\n                        </Message>\n                        <Message chatbot  show={confirmed.email}>Você finalizou o teste Faça uma avaliação sobre o processo que realizou até o momento. Nós agradecemos!</Message>\n                        <Message sended show={confirmed.email}>\n                            <Rating\n                                name=\"rating\"\n                                numberOfStars=\"5\"\n                                currentRating=\"0\"\n                                size={40}\n                                onClick={(value)=>setFieldValue('rating',value)}\n                                activeColor=\"#ffd700\"\n                            />\n                        </Message>\n                        <Send type=\"submit\"  loading={isSubmitting} disabled={isSubmitting} show={confirmed.email} />\n                    </Form>\n                }}\n        </Formik>\n    </Container>;\n}\n\nexport default Main;","import { createGlobalStyle } from \"styled-components\";\n\nexport default createGlobalStyle`\n\n\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap');\n    \n    * {\n        margin:0;\n        padding:0;\n        box-sizing:border-box;\n        font-family: Roboto, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif\n    }\n\n    html, body, #root{\n        max-height:100vh;\n        max-width:100vw;\n        width:100%;\n        height:100%auto;\n        display:flex;\n        justify-content:center;\n    }\n\n    *, button, input{\n        border:0;\n        background:none;\n        font-family: --apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    }\n\n    html{\n        background:var(--background);\n    }\n\n    :root{\n        --background:#f0f0f0;\n        --background-messages:#E5DDD5;\n        --incoming-message:#fff;\n        --sended-message:#DCF8C6;\n    }\n`","import { ToastContainer } from 'react-toastify';\nimport Main from './pages/Main';\nimport GlobalStyles from './styles/GlobalStyles';\n\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n  return <>\n    <Main />\n    <ToastContainer />\n    <GlobalStyles />\n  </>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}